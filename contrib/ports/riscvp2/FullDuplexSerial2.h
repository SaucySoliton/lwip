// automatically generated by spin2cpp v4.0.5 on Tue Dec 17 14:31:16 2019
// command line: spin2cpp --p2 --ccode FullDuplexSerial2.spin2 

#ifndef FullDuplexSerial2_Class_Defined__
#define FullDuplexSerial2_Class_Defined__

#include <stdint.h>

// async tx mode, true output, output enabled for smart output
#define FULLDUPLEXSERIAL2__TX_MODE_DEFAULT (124)
// async rx mode, true input, input  enabled for smart input
#define FULLDUPLEXSERIAL2__RX_MODE_DEFAULT (62)
// async tx mode, iverted output, output enabled for smart output
#define FULLDUPLEXSERIAL2__TX_MODE_INVERTED (-2147483524)
// async rx mode, inverted input, input  enabled for smart input
#define FULLDUPLEXSERIAL2__RX_MODE_INVERTED (-2147483586)

typedef struct FullDuplexSerial2 {
// cog id of this instance
  volatile int32_t 	cog;
// mailbox of this instance 8 longs
  volatile int32_t 	rx1cmd, rx1param, tx1cmd, tx1param, rx2cmd, rx2param, tx2cmd, tx2param;
// -----------------------------------------------------------------------			'the rest just needed for start parameters
  volatile int32_t 	hmailboxaddress;
  volatile int32_t 	hrxpin1, hrxbitrate1, hrxmode1, hrxlutstart1, hrxlutsize1;
  volatile int32_t 	htxpin1, htxbitrate1, htxmode1, htxlutstart1, htxlutsize1;
  volatile int32_t 	hrxpin2, hrxbitrate2, hrxmode2, hrxlutstart2, hrxlutsize2;
  volatile int32_t 	htxpin2, htxbitrate2, htxmode2, htxlutstart2, htxlutsize2;
  volatile int32_t 	htxclocks;
  volatile char 	buf[32];
} FullDuplexSerial2;

  void FullDuplexSerial2_stop(FullDuplexSerial2 *self);
  int32_t FullDuplexSerial2_mailboxaddress(void);
  int32_t FullDuplexSerial2_start_default(FullDuplexSerial2 *self, int32_t baudrate);
  int32_t FullDuplexSerial2_start(FullDuplexSerial2 *self, int32_t rxpin, int32_t txpin, int32_t mode, int32_t baudrate);
  int32_t FullDuplexSerial2_start2(FullDuplexSerial2 *self, int32_t rxpin1, int32_t txpin1, int32_t mode1, int32_t baudrate1, int32_t rxpin2, int32_t txpin2, int32_t mode2, int32_t baudrate2);
  int32_t FullDuplexSerial2_startext(FullDuplexSerial2 *self, int32_t rxpin1, int32_t txpin1, int32_t rxbaudrate1, int32_t txbaudrate1, int32_t rxconfig1, int32_t txconfig1, int32_t rxlutstart1, int32_t rxlutsize1, int32_t txlutstart1, int32_t txlutsize1, int32_t rxpin2, int32_t txpin2, int32_t rxbaudrate2, int32_t txbaudrate2, int32_t rxconfig2, int32_t txconfig2, int32_t rxlutstart2, int32_t rxlutsize2, int32_t txlutstart2, int32_t txlutsize2, int32_t txclocks);
  void FullDuplexSerial2_rxflush(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_rxcheck(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_rxready(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_rx(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_strin(FullDuplexSerial2 *self, int32_t hubaddress, int32_t size, int32_t echo, int32_t port);
  int32_t FullDuplexSerial2_read(FullDuplexSerial2 *self, int32_t hubaddress, int32_t size, int32_t port);
  void FullDuplexSerial2_txflush(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_txcheck(FullDuplexSerial2 *self, int32_t port);
  void FullDuplexSerial2_tx(FullDuplexSerial2 *self, int32_t val, int32_t port);
  void FullDuplexSerial2_str(FullDuplexSerial2 *self, const char *s, int32_t port);
  int32_t FullDuplexSerial2_writehex(FullDuplexSerial2 *self, int32_t hubaddress, int32_t size, int32_t port);
  int32_t FullDuplexSerial2_write(FullDuplexSerial2 *self, int32_t hubaddress, int32_t size, int32_t port);
  void FullDuplexSerial2_num(FullDuplexSerial2 *self, int32_t val, int32_t base, int32_t signflag, int32_t digitsneeded, int32_t port);
  void FullDuplexSerial2_dec(FullDuplexSerial2 *self, int32_t val, int32_t port);
  void FullDuplexSerial2_decuns(FullDuplexSerial2 *self, int32_t val, int32_t digits, int32_t port);
  void FullDuplexSerial2_hex(FullDuplexSerial2 *self, int32_t val, int32_t digits, int32_t port);
  void FullDuplexSerial2_bin(FullDuplexSerial2 *self, int32_t val, int32_t digits, int32_t port);
  void FullDuplexSerial2_nl(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_rxsize(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_rxcount(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_txsize(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_txcount(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_check_rxready(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_wait_rxready(FullDuplexSerial2 *self, int32_t port, int32_t timeout);
  void FullDuplexSerial2_strin_async(FullDuplexSerial2 *self, int32_t hubaddress, int32_t size, int32_t echo, int32_t port);
  void FullDuplexSerial2_read_async(FullDuplexSerial2 *self, int32_t hubaddress, int32_t size, int32_t port);
  int32_t FullDuplexSerial2_check_txready(FullDuplexSerial2 *self, int32_t port);
  int32_t FullDuplexSerial2_wait_txready(FullDuplexSerial2 *self, int32_t port);
  void FullDuplexSerial2_tx_async(FullDuplexSerial2 *self, int32_t val, int32_t port);
  void FullDuplexSerial2_str_async(FullDuplexSerial2 *self, int32_t hubaddress, int32_t port);
  void FullDuplexSerial2_write_async(FullDuplexSerial2 *self, int32_t hubaddress, int32_t size, int32_t port);
#endif
